openapi: 3.0.3
info:
  title: ITspace - OpenAPI 3.0
  description: |-
     itSpace API documentation, binar final project K13
  contact:
    email: rian.rafli@gmail.com
  version: 1.0.0
servers:
  - url: https://it-space-develop.up.railway.app/api/v1
  - url: http://localhost:8000/api/v1

tags:
  - name: courses
    description: Everything about courses
  - name : auth
    description: Everything about authentication
  - name : users
    description: Everything about users
  - name : categories
    description: Everything about categories
  - name : transactions
    description: Everything about transactions
  - name : enrollments
    description: Everything about enrollments
  - name : ratings
    description: Everything about ratings
  - name : chapters
    description: Everything about chapters
  - name : videos
    description: Everything about videos
  - name : progress
    description: Everything about progress
  - name : notifications
    description: Everything about notifications
  
paths:
  /courses:
    post:
      tags:
        - courses
      description: | 
        * This endpoint serves to create a new course. 
        * Utilize multipart/form-data as the request body to enable image uploads.
        * iSpremium body only accept 1 or 0. 1 means true and 0 means false.
        * Restricted acces for admin only
      requestBody:
        content:
          multipart/form-data:
            schema:
                $ref: '#/components/schemas/updateCoursesReq'

      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/createCoursesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'          
    get:
      tags:
        - courses
      description: |
        * This endpoint serves to view all course
        * Have search, filter and pagination feature
      parameters:
        - in: query
          name: ispremium
          example: 1
          schema:
            type: string
          description: |
            * Filter course by type
            * 1 = premium / 0 = not premium
        - in: query
          name: category
          example : backend,frontend
          schema:
            type: string
          description: |
            * Filter course by categories
            * You can put more than one value
        - in: query
          name: level
          example: BEGINNER,INTERMEDIATE,ADVANCED
          schema:
            type: string
          description: |
            * Filter course by difficulty level
            * You can put more than one value
        - in: query
          name: se
          schema:
            type: string
          description: Search filter by its title
          example: javascript
        - in: query
          name: order
          schema:
            type: string
          description: order course by 
          example: popularity
        - in: query
          name: page
          example: 1
          schema:
            type: integer
          description: For pagination feature, select page you want to access
        - in: query
          name: limit
          example: 10
          schema:
            type: integer
          description: For pagination feature, select the number of items you want to return
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          pagination:
                            $ref: "#/components/schemas/Pagination"
                          courses:
                            type: array
                            items:
                              $ref: "#/components/schemas/courseGetAll"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /courses/{courseId}:
    get:
      tags:
        - courses
      description: |
        * This endpoint serves to view course detail
        * Restricted content for user that have not enroll the course, groupUrl will not sent to the response
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: The ID of the course to get.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
             schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/getCoursesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
    put:
      tags:
        - courses
      description: |
        * This endpoint serves to update a course
        * Utilize multipart/form-data as the request body to enable image uploads.
        * This endpoint serves to create a new course.
          Utilize multipart/form-data as the request body to enable image uploads.
          iSpremium body only accept 1 or 0. 1 means true and 0 means false.
        * Restricted acces for admin only
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: The ID of the course to get.
      requestBody:
        content:
          multipart/form-data:
            schema:
                $ref: '#/components/schemas/updateCoursesReq'

      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/createCoursesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  
    delete:
      tags:
        - courses
      description: |
        * This endpoint serves to delete a course
        * Restricted acces for admin only
      parameters:
       - in: path
         name: courseId
         schema:
           type: integer
         required: true
         description: The ID of the course to delete.
      responses:
        "200":
          description: Successful user deletion 
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/basicResponse"
                  - type: object
                    properties:
                      data:
                         $ref: '#/components/schemas/deleteCoursesResponse'
                           
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /auth/register:
    post:
      tags:
        - auth
      description: |
        * This endpoint serves to register new user.
        * Utilize multipart/form-data as the request body to enable image uploads.
        * Otp will sent to email with 10 minutes expiration.
      requestBody:
        content:
          multipart/form-data:
            schema:
                $ref: '#/components/schemas/RegisterReqBody'

      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
  /auth/login:
    post:
      tags:
        - auth
      description: | 
        * This endpoint serves to login.
        * Auth token will sent to http-only cookie.
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/LoginReqBody'

      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
  /auth/google:
    post:
      tags:
        - auth
      description: |
        * This endpoint serves to login with google account.
        * Account will automatically verified if login by this api.
        * Auth token will sent to http-only cookie.
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
  /auth/logout:
    post:
      tags:
        - auth
      description: |
        * This endpoint serves to logout.
        * Not valid token will sent to client cookie.
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data: 
                        type: string
                        example: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
  /auth/resend-otp/{email}:
    post:
      tags:
        - auth
      description: |
        * This endpoint serves to send new otp to your email to verifying your account.
        * Otp will expired after 10 minutes.
      parameters:
      - in: path
        name: email
        example: example@gmail.com
        schema:
          type: string
        required: true
      
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data: 
                        type: string
                        example: example@gmail.com
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
  /auth/reset-password:
    get:
      tags:
        - auth
      description: |
        * This endpoint serves to send reset password link to your email.
        * The link will expired after 10 minutes.
      parameters:
        - in: path
          name: email
          schema:
            type: string
            example: example@gmail.com
          required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data: 
                        type: string
                        example: example@gmail.com
                  
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /auth/reset-password/{token}:
    put:
      tags:
        - auth
      description: |
        * This endpoint serves to reset your password.
      parameters:
          - in: path
            name: token
            schema:
              type: string
            required: true
      requestBody:
       content:
        application/json:
          schema:
            type: object
            properties:
              newPassword:
                type: string
                example: password123
              newPasswordValidation:
                type: string
                example: password123
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data: 
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          email:
                            type: string
                            example: example@gmail.com

                  
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /auth/verify-otp:
    put:
      tags:
        - auth
      description: |
        * This endpoint serves to verify otp.
      requestBody:
        content:
         application/json:
           schema:
             type: object
             properties:
               email:
                 type: string
                 example: example@gmail.com
               otp:
                 type: string
                 example: 123456
             required: 
             - email
             - otp
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data: 
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          email:
                            type: string
                            example: example@gmail.com
                          verified:
                            type: boolean
                            example: true
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
   
   
  /auth/change-password:
    put:
      tags:
        - auth
      description: |
        * This endpoint serves to change your password.
      requestBody:
       content:
        application/json:
          schema:
            type: object
            properties:
              oldPassword:
                type: string
                example: password123
              newPassword:
                type: string
                example: password1234
              newPasswordValidation:
                type: string
                example: password1234
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data: 
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          email:
                            type: string
                            example: example@gmail.com

                  
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
  /users:
    get:
      tags:
        - users
      description: |
        * This endpoint serves to list all users.
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data: 
                        type: object
                        properties:
                          pagination:
                            $ref: "#/components/schemas/Pagination"
                          users:
                            type: array
                            items:
                              type: object
                              properties:
                                id :
                                  type: integer
                                  example: 1
                                email :
                                  type: string
                                  example: example@gmail.com
                                verified :
                                  type: boolean
                                  example: true
                                profile:
                                  type: object
                                  properties:
                                    name :
                                      type: string
                                      example: john doe
                                    phoneNumber :
                                      type: string
                                      example: 08888888
                                    role :
                                      type: string
                                      example: ADMIN
  /users/{id}:
      get:
        tags:
          - users
        parameters:
          - in: path
            name: id
            schema:
              type: integer
            required: true
        description: |
          * This endpoint serves to show user detail.
        responses:
          '201':
            description: Successful operation
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/basicResponse'
                    - type: object
                      properties:
                        data: 
                            type: object
                            properties:
                              id :
                                type: integer
                                example: 1
                              email :
                                type: string
                                example: example@gmail.com
                              verified :
                                type: boolean
                                example: true
                              profile:
                                type: object
                                properties:
                                  name :
                                    type: string
                                    example: john doe
                                  phoneNumber :
                                    type: string
                                    example: 08888888
                                  profilePicture :
                                     type: string
                                     example: example.com
                                  role :
                                    type: string
                                    example: ADMIN
                                  joinDate :
                                    type: string
                                    example: 2023-11-29T18:11:00.927Z
                                  city :
                                    type: string
                                    example : "Bandung"
                                  country :
                                    type: string
                                    example: "Indonesia"
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse400'
          '401':
            description: Unauthenticated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse401'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse403'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse404'
          '500':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse500'
      put:
        tags:
          - users
        parameters:
          - in: path
            name: id
            schema:
              type: integer
            required: true
        requestBody:
          content:
           multipart/form-data:
             schema:
               type: object
               properties:
                 name:
                   type: string
                   example: john doe
                 phoneNumber:
                   type: string
                   example: 0000000
                 city :
                   type: string
                   example : "Bandung"
                 country :
                   type: string
                   example: "Indonesia"
                 image:
                    format: binary
               required:
                 - "name"
        description: |
          * This endpoint serves to edit user profile.
          * Utilize multipart/form-data as the request body to enable image uploads.
          * Restricted acces to account owner only
        responses:
          '201':
            description: Successful operation
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/basicResponse'
                    - type: object
                      properties:
                        data: 
                                type: object
                                properties:
                                  name :
                                    type: string
                                    example: john doe
                                  phoneNumber :
                                    type: string
                                    example: 08888888
                                  profilePicture :
                                     type: string
                                     example: example.com
                                  role :
                                    type: string
                                    example: ADMIN
                                  joinDate :
                                    type: string
                                    example: 2023-11-29T18:11:00.927Z
                                  city :
                                    type: string
                                    example : "Bandung"
                                  country :
                                    type: string
                                    example: "Indonesia"
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse400'
          '401':
            description: Unauthenticated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse401'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse403'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse404'
          '500':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse500'
      delete :
          tags:
            - users
          parameters:
            - in: path
              name: id
              schema:
                type: integer
              required: true
          description: |
            * This endpoint serves to delete user.
            * Restricted acces to account owner only
          responses:
            '201':
              description: Successful operation
              content:
                application/json:
                  schema:
                    allOf:
                      - $ref: '#/components/schemas/basicResponse'
                      - type: object
                        properties:
                          data: 
                                  type: object
                                  properties:
                                    id :
                                      type: integer
                                      example: 1
                                    email :
                                       type: string
                                       example: example@gmail.com
            '400':
              description: Bad request
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse400'
            '401':
              description: Unauthenticated
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse401'
            '403':
              description: Forbidden
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse403'
            '404':
              description: Not found
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse404'
            '500':
              description: Bad request
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse500'



  /categories:
    post:
      tags:
        - categories
      description: |
        * This endpoint serves to create a new category.
        * Restricted acces for admin only.
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/createCategoriesReqBody'  
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/createCategoriesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
    get:
      tags:
        - categories
      description: |
        * This endpoint serves to get all categories.
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                            $ref: "#/components/schemas/createCategoriesResponse"

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
  /categories/{categoryId}:             
    put:
      tags:
        - categories
      description: |
        * This endpoint serves to edit category.
        * Restricted acces for admin only.
      parameters:
      - in: path
        name: categoryId
        schema:
          type: integer
        required: true
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/createCategoriesReqBody'  
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/createCategoriesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
    delete:
      tags:
        - categories
      description: |
        * This endpoint serves to delete category.
        * Restricted acces for admin only.
      parameters:
      - in: path
        name: categoryId
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/createCategoriesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 

  /transactions:
    post:
      tags:
        - transactions
      description: |
        * This endpoint serves to buy paid course (make transaction).
        * paymentMethod: only accept : VIRTUAL_ACCOUNT / E_WALLET / GERAI_RETAIL.
      requestBody:
        content:
          application/json:
            schema:
               type: object
               properties:
                courseId :
                  type: integer  
                  example : 1
                paymentMethod: 
                  type: string
                  example: VIRTUAL_ACCOUNT
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                          id:
                            type: integer
                            example: 1
                          date:
                           type: string
                           example: "2023-12-06T16:13:46.710Z"
                          expirationDate:
                           type: string
                           example: "2023-12-07T16:13:46.710Z"
                          payDone:
                           type: boolean
                           example: false
                          payDate:
                           type: string
                           example: null
                          paymentMethod:
                           type: string
                           example: "VIRTUAL_ACCOUNT"
                          course:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              code:
                                type: string
                                example: "BEJS"
                              title:
                                type: string
                                example: "Backend javascript"
                              price:
                                type: string
                                example: "100000"
                              level:
                                type: string
                                example: "BEGINNER"
                              ispremium:
                                type: boolean
                                example: true
                             
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
    get:
      tags:
        - transactions
      description:  |
        * This endpoint serves to get all transactions.
        * Restricted access for admin only.
      parameters:
        - in: query
          name: status
          example: 1
          schema:
            type: string
          description: 1 = already paid, 0 = not paid yet
        - in: query
          name: courseCode
          example : BEJS
          schema:
            type: string
          description: filter course by course code
        - in: query
          name: method
          example: cc
          schema:
            type: string
          description: filter course payment method
        - in: query
          name: se
          schema:
            type: string
          description: search title of course
        - in: query
          name: from
          example: 12/5/2023
          schema:
            type: string
          description: filter transactions by the start date of 
        - in: query
          name: to
          example: 12/6/2023
          schema:
            type: string
          description: filter transactions by the end date of 
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          Pagination:
                            title: Pagination
                            type: object
                            properties:
                              links:
                                type: object
                                properties:
                                  next:
                                    type: string
                                    example: "https://domain.com/transactions?method=cc&page=3&limit=10"
                                  prev:
                                    type: string
                                    example: "https://domain.com/transactions?method=cc&page=1&limit=10"
                              total_items:
                                type: integer
                                example: 100      
                          transactions :
                           type: array
                           items :
                            type: object
                            properties:
                              id:
                               type: integer
                               example: 1
                              date:
                               type: string
                               example: "2023-12-06T16:13:46.710Z"
                              expirationDate:
                               type: string
                               example: "2023-12-07T16:13:46.710Z"
                              payDone:
                               type: boolean
                               example: true

                              payDate:
                               type: boolean
                               example: true

                              paymentMethod:
                               type: string
                               example: "cc"
                              course:
                               type: object
                               properties:
                                  id:
                                   type: integer
                                   example: 1
                                  code:
                                    type: string
                                    example: "BEJS"
                                  title:
                                    type: string
                                    example: "Backend javascript"
                                  price:
                                    type: string
                                    example: "100000"
                                  level:
                                    type: string
                                    example: "BEGINNER"
                                  ispremium:
                                    type: boolean
                                    example: true
                            
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /transactions/{id}: 
    get:
      tags:
        - transactions
      description: |
        * This endpoint serves to get all transactions.
        * Restricted access for admin / author only.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                           type: integer
                           example: 1
                          date:
                           type: string
                           example: "2023-12-06T16:13:46.710Z"
                          expirationDate:
                           type: string
                           example: "2023-12-07T16:13:46.710Z"
                          payDone:
                           type: boolean
                           example: true
                          
                          payDate:
                           type: boolean
                           example: true
                          
                          paymentMethod:
                           type: string
                           example: "cc"
                          course:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              code:
                                type: string
                                example: "BEJS"
                              title:
                                type: string
                                example: "Backend javascript"
                              price:
                                type: string
                                example: "100000"
                              level:
                                type: string
                                example: "BEGINNER"
                              ispremium:
                                type: boolean
                                example: true
                            
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
    put:
      tags:
        - transactions
      description: |
        * This endpoint serves to pay transactions.
        * Restricted access for author only.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                          id:
                           type: integer
                           example: 1
                          date:
                           type: string
                           example: "2023-12-06T16:13:46.710Z"
                          expirationDate:
                           type: string
                           example: "2023-12-07T16:13:46.710Z"
                          payDone:
                           type: boolean
                           example: true
                          payDate:
                           type: string
                           example: "2023-12-06T19:35:33.128Z"
                          paymentMethod:
                           type: string
                           example: "VIRTUAL_ACCOUNT"
                          course:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              code:
                                type: string
                                example: "BEJS"
                              title:
                                type: string
                                example: "Backend javascript"
                              price:
                                type: string
                                example: "100000"
                              level:
                                type: string
                                example: "BEGINNER"
                              ispremium:
                                type: boolean
                                example: true
    delete:
      tags:
        - transactions
      description: |
        * This endpoint serves to pay transactions.
        * Restricted access for author / admin only.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                          id:
                           type: integer
                           example: 1
                          date:
                           type: string
                           example: "2023-12-06T16:13:46.710Z"
                          expirationDate:
                           type: string
                           example: "2023-12-07T16:13:46.710Z"
                          payDone:
                           type: boolean
                           example: true
                          payDate:
                           type: string
                           example: "2023-12-06T19:35:33.128Z"
                          paymentMethod:
                           type: string
                           example: "cc"
                          course:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              code:
                                type: string
                                example: "BEJS"
                              title:
                                type: string
                                example: "Backend javascript"
                              price:
                                type: string
                                example: "100000"
                              level:
                                type: string
                                example: "BEGINNER"
                              ispremium:
                                type: boolean
                                example: true
                           
                           
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
  /my-transactions:
    get:
      tags:
        - transactions
      description: |
        * This endpoint serves view transactions of logged in user.
        * Restricted access for author only.
      parameters:
        - in: query
          name: status
          example: 1
          schema:
            type: string
          description: 1 = already paid, 0 = not paid yet
        - in: query
          name: courseCode
          example : BEJS
          schema:
            type: string
          description: filter course by course code
        - in: query
          name: method
          example: VIRTUAL_ACCOUNT
          schema:
            type: string
          description: filter course payment method
        - in: query
          name: se
          schema:
            type: string
          description: search title of course
        - in: query
          name: from
          example: 12/5/2023
          schema:
            type: string
          description: filter transactions by the start date of 
        - in: query
          name: to
          example: 12/6/2023
          schema:
            type: string
          description: filter transactions by the end date of 
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          rangeDate:
                           type: object
                           properties:
                             from:
                              type: string
                              example: 2023-12-04T17:00:00.000Z
                             to:
                              type: string
                              example: 2023-12-07T17:59:47.297Z
                          transactions :
                        
                            type: array
                            items :
                             type: object
                             properties:
                               id:
                                type: integer
                                example: 1
                               date:
                                type: string
                                example: "2023-12-06T16:13:46.710Z"
                               expirationDate:
                                type: string
                                example: "2023-12-07T16:13:46.710Z"
                               payDone:
                                type: boolean
                                example: true
                               
                               payDate:
                                type: boolean
                                example: true
                               
                               paymentMethod:
                                type: string
                                example: "VIRUTAL_ACCOUNT"
                               course:
                                type: object
                                properties:
                                   id:
                                    type: integer
                                    example: 1
                                   code:
                                     type: string
                                     example: "BEJS"
                                   title:
                                     type: string
                                     example: "Backend javascript"
                                   price:
                                     type: string
                                     example: "100000"
                                   level:
                                     type: string
                                     example: "BEGINNER"
                                   ispremium:
                                     type: boolean
                                     example: true
                            
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /enrollments:
    post:
      tags:
        - enrollments
      description: |
        * This endpoint serves to make enrollment to not premium course.
        * Restricted access for author only..
      requestBody:
        content:
          application/json:
            schema:
               type: object
               properties:
                courseId :
                  type: integer  
                  example : 1
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                          id:
                            type: integer
                            example: 1
                          date:
                           type: string
                           example: "2023-12-06T16:13:46.710Z"
                          course:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              code:
                                type: string
                                example: "BEJS"
                              title:
                                type: string
                                example: "Backend javascript"
                              price:
                                type: string
                                example: "0"
                              level:
                                type: string
                                example: "BEGINNER"
                              ispremium:
                                type: boolean
                                example: false
                              completed:
                                type: boolean
                                example: false
                              lastAccessed:
                                type: string
                                example: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /my-enrollments: 
    get:
      tags:
        - enrollments
      description: |
        * This endpoint serves to make enrollment to not premium course.
      parameters:
      - in: query
        name: ispremium
        example: 1
        schema:
          type: string
        description: 1 = premium, 0 = not premium
      - in: query
        name: category
        example : backend,frontend
        schema:
          type: string
        description: filter course by categories
      - in: query
        name: level
        example: BEGINNER,INTERMEDIATE,ADVANCED
        schema:
          type: string
        description: filter course by level
      - in: query
        name: se
        schema:
          type: string
        description: search title of course
      - in: query
        name: page
        example: 1
        schema:
          type: integer
        description: the page you want to access
      - in: query
        name: limit
        example: 10
        schema:
          type: integer
        description: The numbers of items to return
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id :
                            type: integer
                            example: 1
                          code :
                            type: string
                            example: BE1
                          title:
                            type: string
                            example: Backend dengan expressjs
                          price:
                             type: integer
                             example: 1000
                          level:
                            type: string
                            example: BEGINNER
                          isPremium:
                            type: boolean
                            example: true
                          groupUrl:
                           type: string
                           example: www.url.com
                          thumbnailUrl:
                           type: string
                           example: www.url.com
                          courseCategory:
                            type: array
                            items:
                              type: object
                              properties:
                                category:
                                  type: object
                                  properties:
                                    name:
                                      type: string
                                      example: backend
                          mentor:
                            type: array
                            items:
                              type: object
                              properties:
                                author:
                                  type: object
                                  properties:
                                    profile:
                                      type: object
                                      properties:
                                        name:
                                          type: string
                                          example: john doe
                                        Pagination:
                                          title: Pagination
                                          type: object
                                          properties:
                                            links:
                                              type: object
                                              properties:
                                                next:
                                                  type: string
                                                  example: "https://domain.com/courses?categories=Backend&level=BEGINNER&page=3&limit=10"
                                                prev:
                                                  type: string
                                                  example: "https://domain.com/courses?categories=Backend&level=BEGINNER&page=1&limit=10"
                                            total_items:
                                              type: integer
                                              example: 100      
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /ratings:
    post:
      tags:
        - ratings
      description: give rating
      requestBody:
        content:
          application/json:
            schema:
               type: object
               properties:
                courseId :
                  type: integer  
                  example : 1
                rating :
                  type: integer  
                  example : 1
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                          id:
                            type: integer
                            example: 1
                          rate:
                            type: integer
                            example: 1
                          course:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              code:
                                type: string
                                example: be1
                              title:
                                type: string
                                example: "Backend javascript"
                              price:
                                type: string
                                example: "0"
                              level:
                                type: string
                                example: "BEGINNER"
                              ispremium:
                                type: boolean
                                example: false
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  
    delete:
      tags:
        - ratings
      description: delete rating
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the rating to delete.
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                          id:
                            type: integer
                            example: 1
                          rate:
                            type: integer
                            example: 1
                          course:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              code:
                                type: string
                                example: be1
                              title:
                                type: string
                                example: "Backend javascript"
                              price:
                                type: string
                                example: "0"
                              level:
                                type: string
                                example: "BEGINNER"
                              ispremium:
                                type: boolean
                                example: false
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  
  /courses/{courseId}/chapters:
    post:
      tags:
        - chapters
      description: make chapter
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: The ID of the course of the chapter to create.
      
      requestBody:
        content:
          application/json:
            schema:
               type: object
               properties:
                ispremium :
                  type: integer  
                  example : 1
                  description: '1 for premium 0 for not premium'
                number :
                  type: integer  
                  example : 1
                title :
                  type: string  
                  example : introducion
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                          id:
                            type: integer
                            example: 1
                          title:
                            type: string
                            example: 'introduction'
                          number:
                            type: integer
                            example: 1
                          isPremium:
                            type: integer
                            example: 1
                          course:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              code:
                                type: string
                                example: be1
                              title:
                                type: string
                                example: "Backend javascript"
                              price:
                                type: string
                                example: "0"
                              level:
                                type: string
                                example: "BEGINNER"
                              ispremium:
                                type: boolean
                                example: false
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
    get:
      tags:
        - chapters
      description: make chapter
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: The ID of the course of the chapter to create.
      
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: array
                       items:
                        type: object
                        properties:
                           id:
                             type: integer
                             example: 1
                           title:
                             type: string
                             example: 'introduction'
                           number:
                             type: integer
                             example: 1
                           isPremium:
                             type: integer
                             example: 1
                           course:
                            type: object
                            properties:
                               id:
                                type: integer
                                example: 1
                               code:
                                 type: string
                                 example: be1
                               title:
                                 type: string
                                 example: "Backend javascript"
                               price:
                                 type: string
                                 example: "0"
                               level:
                                 type: string
                                 example: "BEGINNER"
                               ispremium:
                                 type: boolean
                                 example: false
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /courses/{courseId}/chapters/{id}:
    get:
      tags:
        - chapters
      description: delete chapter
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: The ID of the courseId of the chapters to delete.
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the chapters to delete.
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                          id:
                            type: integer
                            example: 1
                          title:
                            type: string
                            example: 'introduction'
                          number:
                            type: integer
                            example: 1
                          isPremium:
                            type: integer
                            example: 1
                          course:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              code:
                                type: string
                                example: be1
                              title:
                                type: string
                                example: "Backend javascript"
                              price:
                                type: string
                                example: "0"
                              level:
                                type: string
                                example: "BEGINNER"
                              ispremium:
                                type: boolean
                                example: false
    put:
      tags:
        - chapters
      description: delete chapter
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: The ID of the courseId of the chapters to delete.
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the chapters to delete.
      requestBody:
        content:
          application/json:
            schema:
               type: object
               properties:
                ispremium :
                  type: integer  
                  example : 1
                  description: '1 for premium 0 for not premium'
                number :
                  type: integer  
                  example : 1
                title :
                  type: string  
                  example : introducion
      
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                          id:
                            type: integer
                            example: 1
                          title:
                            type: string
                            example: 'introduction'
                          number:
                            type: integer
                            example: 1
                          isPremium:
                            type: integer
                            example: 1
                          course:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              code:
                                type: string
                                example: be1
                              title:
                                type: string
                                example: "Backend javascript"
                              price:
                                type: string
                                example: "0"
                              level:
                                type: string
                                example: "BEGINNER"
                              ispremium:
                                type: boolean
                                example: false
    delete:
      tags:
        - chapters
      description: delete chapter
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: The ID of the courseId of the chapters to delete.
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the chapters to delete.
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                          id:
                            type: integer
                            example: 1
                          title:
                            type: string
                            example: 'introduction'
                          number:
                            type: integer
                            example: 1
                          isPremium:
                            type: integer
                            example: 1
                          course:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              code:
                                type: string
                                example: be1
                              title:
                                type: string
                                example: "Backend javascript"
                              price:
                                type: string
                                example: "0"
                              level:
                                type: string
                                example: "BEGINNER"
                              ispremium:
                                type: boolean
                                example: false

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /my-notifications:
    get:
      tags:
        - notifications
      description: get all notification of user
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: array
                       items:
                        type: object
                        properties:
                           id:
                             type: integer
                             example: 1
                           type:
                             type: string
                             example: 'Pembayaran'
                           message:
                             type: string
                             example: "Pembayaran telah berhasil, anda dapat mengakses kelas"
                           details:
                             type: string
                             example: "Selamat belajar"
                           createdAt:
                             type: string
                             example: 2023-12-05T20:37:56.205Z
                           isRead:
                             type: boolean
                             example: false
                           authorId:
                             type: string
                             example: 1
                           
  /my-notifications/{id}:
    delete:
      tags:
        - notifications
      description: delete a notification
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                           id:
                             type: integer
                             example: 1
                           type:
                             type: string
                             example: 'Pembayaran'
                           message:
                             type: string
                             example: "Pembayaran telah berhasil, anda dapat mengakses kelas"
                           details:
                             type: string
                             example: "Selamat belajar"
                           createdAt:
                             type: string
                             example: 2023-12-05T20:37:56.205Z
                           isRead:
                             type: boolean
                             example: false
                           authorId:
                             type: string
                             example: 1
  /courses/{courseId}/chapters/{chapterId}/videos:
    post:
      tags:
        - videos
      description: make chapter
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: The ID of the course of the video to create.
      
        - in: path
          name: chapterId
          schema:
            type: integer
          required: true
          description: The ID of the chapter of the video to create.
      requestBody:
        content:
          application/json:
            schema:
               type: object
               properties:
                title :
                  type: string  
                  example : introducion
                  description: '1 for premium 0 for not premium'
                description :
                  type: string  
                  example : welcome to first video...
                url :
                  type: string  
                  example : www.com
                duration :
                  type: integer  
                  example : 5

      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                          id:
                            type: integer
                            example: 1
                          title:
                            type: string
                            example: 'introduction'
                          description :
                            type: integer
                            example: 1
                          url:
                            type: string
                            example: www.com
                          duration:
                            type: integer
                            example: 5
                          chapter:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              number:
                                type: integer
                                example: 3
                              title:
                                type: string
                                example: "Backend javascript"
                              isPremium:
                                type: boolean
                                example: true
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /courses/{courseId}/chapters/{chapterId}/videos/{videoId}:
    put:
      tags:
        - videos
      description: make chapter
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: The ID of the course of the video to create.
        - in: path
          name: chapterId
          schema:
            type: integer
          required: true
          description: The ID of the chapter of the video to create.
        - in: path
          name: videoId
          schema:
            type: integer
          required: true
          description: The ID of the chapter of the video to create.
      requestBody:
        content:
          application/json:
            schema:
               type: object
               properties:
                title :
                  type: string  
                  example : introducion
                  description: '1 for premium 0 for not premium'
                description :
                  type: string  
                  example : welcome to first video...
                url :
                  type: string  
                  example : www.com
                duration :
                  type: integer  
                  example : 5

      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                          id:
                            type: integer
                            example: 1
                          title:
                            type: string
                            example: 'introduction'
                          description :
                            type: integer
                            example: 1
                          url:
                            type: string
                            example: www.com
                          duration:
                            type: integer
                            example: 5
                          chapter:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              number:
                                type: integer
                                example: 3
                              title:
                                type: string
                                example: "Backend javascript"
                              isPremium:
                                type: boolean
                                example: true
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
    get:
      tags:
        - videos
      description: make chapter
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: The ID of the course of the video to create.
        - in: path
          name: chapterId
          schema:
            type: integer
          required: true
          description: The ID of the chapter of the video to create.
        - in: path
          name: videoId
          schema:
            type: integer
          required: true
          description: The ID of the chapter of the video to create.
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                          id:
                            type: integer
                            example: 1
                          title:
                            type: string
                            example: 'introduction'
                          description :
                            type: integer
                            example: 1
                          url:
                            type: string
                            example: www.com
                          duration:
                            type: integer
                            example: 5
                          chapter:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              number:
                                type: integer
                                example: 3
                              title:
                                type: string
                                example: "Backend javascript"
                              isPremium:
                                type: boolean
                                example: true
                              course:
                               type: object
                               properties:
                                  id:
                                   type: integer
                                   example: 1
                                  code:
                                    type: string
                                    example: "BE!"
                                  title:
                                    type: string
                                    example: "Backend javascript"
                                  price:
                                    type: integer
                                    example: 1
                                  level:
                                    type: string
                                    example: "BEGINNER"
                                  ispremium:
                                    type: boolean
                                    example: false
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
                           
    delete:
      tags:
        - videos
      description: delete video
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: The ID of the course of the video to create.
        - in: path
          name: chapterId
          schema:
            type: integer
          required: true
          description: The ID of the chapter of the video to create.
        - in: path
          name: videoId
          schema:
            type: integer
          required: true
          description: The ID of the chapter of the video to create.
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                          id:
                            type: integer
                            example: 1
                          title:
                            type: string
                            example: 'introduction'
                          description :
                            type: integer
                            example: 1
                          url:
                            type: string
                            example: www.com
                          duration:
                            type: integer
                            example: 5
                          chapter:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              number:
                                type: integer
                                example: 3
                              title:
                                type: string
                                example: "Backend javascript"
                              isPremium:
                                type: boolean
                                example: true
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /progress:
    post:
      tags:
        - progress
      description: make chapter
      requestBody:
        content:
          application/json:
            schema:
               type: object
               properties:
                videoId :
                  type: integer  
                  example : 1

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                             id:
                               type: integer
                               example: 1
                             completedDate:
                               type: string
                               example: '2023-12-17T12:45:03.889Z'
                             video:
                              type: object
                              properties:
                                 id:
                                  type: integer
                                  example: 1
                                 title:
                                   type: string
                                   example: "Backend javascript 1"
                             author:
                              type: object
                              properties:
                                 id:
                                  type: integer
                                  example: 1
                                 profile:
                                   type: object
                                   properties:
                                     name: 
                                       type: string
                                       example: jhon doe
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                          id:
                            type: integer
                            example: 1
                          completedDate:
                            type: string
                            example: '2023-12-17T12:45:03.889Z'
                          video:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              title:
                                type: string
                                example: "Backend javascript 1"
                          author:
                           type: object
                           properties:
                              id:
                               type: integer
                               example: 1
                              profile:
                                type: object
                                properties:
                                  name: 
                                    type: string
                                    example: jhon doe
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'                         

#---------------------------------------components--------------------------------------

components:
  schemas:
    basicResponse:
      title: basicResponse
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "successfully do task"
    ErrorResponse400:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "failed to do task"
        data:
          type: integer
          nullable: true
          example : null
    ErrorResponse401:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Unauthorized"
        data:
          type: integer
          nullable: true
          example : null
    ErrorResponse403:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Forbidden"
        data:
          type: integer
          nullable: true
          example : null
    ErrorResponse404:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "not found"
        data:
          type: integer
          nullable: true
          example : null
    ErrorResponse500:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "failed to do task"
        data:
          type: integer
          nullable: true
          example : null
    createCoursesResponse:
      title: course
      type: object
      properties:
        id:
          type: integer
          example: 1
        code: 
          type: string
          example: "BEX12"
        title:
          type: string
          example: "Backend dengan expressjs"
        price:
          type: string
          example: 900000
        level:
          type: string
          example: "BEGINNER"
        isPremium:
          type: boolean
          example: true
        description:
          type: string
          example: "course ini akan mengejarkan kamu tentang API"
        groupUrl:
          type: string
          example: "www.url.com"
        thumbnailUrl:
          type: string
          example : "www.url.com"
        mentor:
          type: array
          items:
            type: string
          example : ["mentor1@gmail.com","mentor2@gmail.com"]
        category:
          type: array
          items:
            type: string
          example : ["Backend","Database"]
    deleteCoursesResponse:
      title: course
      type: object
      properties:
        id:
          type: integer
          example: 1
        code: 
          type: string
          example: "BEX12"
        title:
          type: string
          example: "Backend dengan expressjs"
        price:
          type: string
          example: 900000
        level:
          type: string
          example: "BEGINNER"
        isPremium:
          type: boolean
          example: true
        description:
          type: string
          example: "course ini akan mengejarkan kamu tentang API"
        groupUrl:
          type: string
          example: "www.url.com"
        thumbnailUrl:
          type: string
          example: "www.url.com"
    getCoursesResponse:
      type: object
      properties:
        id :
          type: integer
          example: 1
        code :
          type: string
          example: BE1
        title:
          type: string
          example: Backend dengan expressjs
        price:
           type: integer
           example: 1000
        level:
          type: string
          example: BEGINNER
        isPremium:
          type: boolean
          example: true
        groupUrl:
         type: string
         example: www.url.com
        thumbnailUrl:
         type: string
         example: www.url.com
        courseCategory:
          type: array
          items:
            type: object
            properties:
              category:
                type: object
                properties:
                  name:
                    type: string
                    example: backend
        mentor:
          type: array
          items:
            type: object
            properties:
              author:
                type: object
                properties:
                  profile:
                    type: object
                    properties:
                      name:
                        type: string
                        example: john doe
                  
        rating:
          type: integer
          example: 4
    Courses:
      type: object
      properties:
        id:
          type: integer
          example: 1
        code: 
          type: string
          example: "BEX12"
        title:
          type: string
          example: Backend dengan expressjs
        price:
          type: string
          example: 200000
        level:
          type: string
          example: BEGINNER
        isPremium:
          type: boolean
          example: true
        description:
          type: string
          example: "course ini akan mengejarkan kamu tentang API"
        groupUrl:
          type: string
          example: "www.url.com"
        mentor:
           type: array
           items:
            type: string
           example : ["john@gmail.com","doe@gmail.com"]
        category:
          type: array
          items:
            type: string
          example : ["Backend","Database"]
    updateCoursesReq:
      type: object
      properties:
        code: 
          type: string
          example: "BEX12"
        title:
          type: string
          example: Backend dengan expressjs
        price:
          type: string
          example: 200000
        level:
          type: string
          example: BEGINNER
        isPremium:
          type: string
          example: 1
        description:
          type: string
          example: "course ini akan mengejarkan kamu tentang API"
        groupUrl:
          type: string
          example: "www.url.com"
        image:
            format: binary
        mentorEmail:
           type: array
           items:
            type: string
           example : ["john@gmail.com","doe@gmail.com"]
        courseCategory:
          type: array
          items:
            type: string
          example : ["Backend","Database"]
      required:
        - code
        - title
        - price
        - level
        - isPremium
        - description
        - groupUrl
        - mentorEmail
        - courseCategory
    courseGetAll:
      type: object
      properties:
        id :
          type: integer
          example: 1
        code :
          type: string
          example: BE1
        title:
          type: string
          example: Backend dengan expressjs
        price:
           type: string
           example: 9999999
        level:
          type: string
          example: BEGINNER
        isPremium:
          type: boolean
          example: true
        description:
          type: string
          example: Course ini mengajarkan kamu tentang backend
        thumbnailUrl:
         type: string
         example: www.url.com
        courseCategory:
          type: array
          items:
            type: object
            properties:
              category:
                type: object
                properties:
                  name:
                    type: string
                    example: backend
        mentor:
          type: array
          items:
            type: object
            properties:
              author:
                type: object
                properties:
                  profile:
                    type: object
                    properties:
                      name:
                        type: string
                        example: john doe
        _count:
          type: object
          properties:
            chapter:
              type: integer
              example: 4   
        duration:
          type : integer
          example: 4
        rate: 
          type : integer
          example: 4
    Pagination:
      title: Pagination
      type: object
      properties:
        links:
          type: object
          properties:
            next:
              type: string
              example: "https://domain.com/courses?categories=Backend&level=BEGINNER&page=3&limit=10"
            prev:
              type: string
              example: "https://domain.com/courses?categories=Backend&level=BEGINNER&page=1&limit=10"
        total_items:
          type: integer
          example: 100
    RegisterReqBody:
      title: Register
      type: object
      properties:
        name:
          type: string
          example: name example
        email:
         type: string
         example: example@gmail.com
        password:
          type: string
          example: password123
        passwordValidation:
          type: string
          example: password123
        image:
            format: binary
      required:
        - name
        - email
        - password
        - passwordValidation
    RegisterResponse:
      title: Register response
      type: object
      properties:
        id:
          type: integer
          example: 3
        email:
         type: string
         example: example@gmail.com
        verified:
          type: string
          example: false
    LoginReqBody:
      title: Register
      type: object
      properties:
        email:
         type: string
         example: example@gmail.com
        password:
          type: string
          example: password123
      required:
        - email
        - password
    LoginResponse:
      title: Register response
      type: object
      properties:
        id:
          type: integer
          example : 1
        email:
         type: string
         example: example@gmail.com
        verified:
         type: boolean
         example: true
        profile:
          type: object
          properties:
            role :
              type: string
              example : ADMIN
    createCategoriesReqBody:
      title: createCategoriesReqBody
      type: object
      properties:
        name:
          type: string
          example: "Frontend"
    createCategoriesResponse:
     title: createCategoriesResponse
     type: object
     properties:
       id:
         type: integer
         example: 1
       name:
        type: string
        example: "Frontend"
       
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
