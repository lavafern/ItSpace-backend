openapi: 3.0.3
info:
  title: ITspace - OpenAPI 3.0
  description: |-
     itSpace API documentation, binar final project K13
  contact:
    email: rian.rafli@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:8000/api/v1
tags:
  - name: courses
    description: Everything about courses
  - name : auth
    description: Register,login and logout
  - name : users
    description: Everything about users
  - name : categories
    description: Everything about categories
  - name : transactions
    description: login,logout,register
  - name : enrollment
    description: login,logout,register
  - name : rating
    description: login,logout,register
  - name : progress
    description: login,logout,register
  
paths:
  /courses:
    post:
      tags:
        - courses
      description: create new course
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/updateCoursesReq'

      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/createCoursesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'          
    get:
      tags:
        - courses
      description: get all course
      parameters:
        - in: query
          name: type
          schema:
            type: string
          description: filter course by type, premium or not
        - in: query
          name: categories
          schema:
            type: string
          description: filter course by categories
        - in: query
          name: level
          schema:
            type: integer
          description: filter course by level
        - in: query
          name: search
          schema:
            type: string
          description: filter course by type, premium or not
        - in: query
          name: page
          schema:
            type: integer
          description: the page you want to access
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          pagination:
                            $ref: "#/components/schemas/Pagination"
                          courses:
                            type: array
                            items:
                              $ref: "#/components/schemas/courseGetAll"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /courses/{courseId}:
    get:
      tags:
        - courses
      description: get specific course
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: The ID of the course to get.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
             schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/getCoursesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
    put:
      tags:
        - courses
      description: update new course
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: The ID of the course to get.
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/updateCoursesReq'

      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/createCoursesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  
    delete:
      tags:
        - courses
      description: Deletes a specific course.
      parameters:
       - in: path
         name: courseId
         schema:
           type: integer
         required: true
         description: The ID of the course to delete.
      responses:
        "200":
          description: Successful user deletion
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/basicResponse"
                  - type: object
                    properties:
                      data:
                         $ref: '#/components/schemas/deleteCoursesResponse'
                           
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /auth/register:
    post:
      tags:
        - auth
      description: create new course
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/RegisterReqBody'

      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
  /auth/login:
    post:
      tags:
        - auth
      description: create new course
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/LoginReqBody'

      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'    
  /categories:
    post:
      tags:
        - categories
      description: create new course
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/createCategoriesReqBody'  
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/createCategoriesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
    get:
      tags:
        - categories
      description: get all categories
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                            $ref: "#/components/schemas/createCategoriesResponse"

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
  /categories/{categoryId}:             
    put:
      tags:
        - categories
      description: update category
      parameters:
      - in: path
        name: categoryId
        schema:
          type: integer
        required: true
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/createCategoriesReqBody'  
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/createCategoriesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 
    delete:
      tags:
        - categories
      description: delete category
      parameters:
      - in: path
        name: categoryId
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/createCategoriesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500' 


#---------------------------------------components--------------------------------------

components:
  schemas:
    basicResponse:
      title: basicResponse
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "successfully do task"
    ErrorResponse400:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "failed to do task"
        data:
          type: integer
          nullable: true
          example : null
    ErrorResponse401:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Unauthorized"
        data:
          type: integer
          nullable: true
          example : null
    ErrorResponse403:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Forbidden"
        data:
          type: integer
          nullable: true
          example : null
    ErrorResponse404:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "not found"
        data:
          type: integer
          nullable: true
          example : null
    ErrorResponse500:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "failed to do task"
        data:
          type: integer
          nullable: true
          example : null
    createCoursesResponse:
      title: course
      type: object
      properties:
        id:
          type: integer
          example: 1
        code: 
          type: string
          example: "BEX12"
        title:
          type: string
          example: "Backend dengan expressjs"
        price:
          type: string
          example: 900000
        level:
          type: string
          example: "BEGINNER"
        isPremium:
          type: boolean
          example: true
        description:
          type: string
          example: "course ini akan mengejarkan kamu tentang API"
        groupUrl:
          type: string
          example: "www.url.com"
        mentor:
          type: array
          items:
            type: string
          example : ["mentor1@gmail.com","mentor2@gmail.com"]
        category:
          type: array
          items:
            type: string
          example : ["Backend","Database"]
    deleteCoursesResponse:
      title: course
      type: object
      properties:
        id:
          type: integer
          example: 1
        code: 
          type: string
          example: "BEX12"
        title:
          type: string
          example: "Backend dengan expressjs"
        price:
          type: string
          example: 900000
        level:
          type: string
          example: "BEGINNER"
        isPremium:
          type: boolean
          example: true
        description:
          type: string
          example: "course ini akan mengejarkan kamu tentang API"
        groupUrl:
          type: string
          example: "www.url.com"
    getCoursesResponse:
      title: course
      type: object
      properties:
        id:
          type: integer
          example: 1
        code: 
          type: string
          example: "BEX12"
        title:
          type: string
          example: "Backend dengan expressjs"
        price:
          type: string
          example: 900000
        level:
          type: string
          example: "BEGINNER"
        isPremium:
          type: boolean
          example: true
        mentor:
          type: array
          items:
            type: string
          example : ["john","doe"]
        category:
          type: array
          items:
            type: string
          example : ["Backend","Database"]
        rating:
          type: integer
          example: 4
        progress:
          type: integer
          example: 4
        chapter:
          type: array
          items:
            example : [{"id": 1,"title" : "pendahuluan", "duration" : "20","video" : [ {"id": 3, "title": "Judul Video 3"}, {"id": 4, "title": "Judul Video 4"}]},{"id": 2,"title" : "pemrograman dasar", "duration" : "20","video" : [ {"id": 1, "title": "Judul Video 1"}, {"id": 1, "title": "Judul Video 1"}]}]
    Courses:
      type: object
      properties:
        id:
          type: integer
          example: 1
        code: 
          type: string
          example: "BEX12"
        title:
          type: string
          example: Backend dengan expressjs
        price:
          type: string
          example: 200000
        level:
          type: string
          example: BEGINNER
        isPremium:
          type: boolean
          example: true
        description:
          type: string
          example: "course ini akan mengejarkan kamu tentang API"
        groupUrl:
          type: string
          example: "www.url.com"
        mentor:
           type: array
           items:
            type: string
           example : ["john@gmail.com","doe@gmail.com"]
        category:
          type: array
          items:
            type: string
          example : ["Backend","Database"]
    updateCoursesReq:
      type: object
      properties:
        code: 
          type: string
          example: "BEX12"
        title:
          type: string
          example: Backend dengan expressjs
        price:
          type: string
          example: 200000
        level:
          type: string
          example: BEGINNER
        isPremium:
          type: boolean
          example: true
        description:
          type: string
          example: "course ini akan mengejarkan kamu tentang API"
        groupUrl:
          type: string
          example: "www.url.com"
        mentorEmail:
           type: array
           items:
            type: string
           example : ["john@gmail.com","doe@gmail.com"]
        courseCategory:
          type: array
          items:
            type: string
          example : ["Backend","Database"]
          
    courseGetAll:
      type: object
      properties:
        title:
          type: string
          example: Backend dengan expressjs
        level:
          type: string
          example: BEGINNER
        isPremium:
          type: boolean
          example: true
        chapter:
          type: integer
          example: 5
        rating:
          type: integer
          example: 4.5
        duration:
          type: integer
          example: 90
        mentor:
           type: array
           items:
            type: string
           example : ["john","doe"]
        courseCategory:
          type: array
          items:
            type: string
          example : ["Backend","Database"]
    Pagination:
      title: Pagination
      type: object
      properties:
        links:
          type: object
          properties:
            next:
              type: string
              example: "https://domain.com/courses?categories=Backend&level=BEGINNER&page=3&limit=10"
            prev:
              type: string
              example: "https://domain.com/courses?categories=Backend&level=BEGINNER&page=1&limit=10"
        total_items:
          type: integer
          example: 100
    RegisterReqBody:
      title: Register
      type: object
      properties:
        name:
          type: string
          example: name example
        email:
         type: string
         example: example@gmail.com
        password:
          type: string
          example: password123
        passwordValidation:
          type: string
          example: password123
    RegisterResponse:
      title: Register response
      type: object
      properties:
        id:
          type: integer
          example: 3
        email:
         type: string
         example: example@gmail.com
        verified:
          type: string
          example: false
    LoginReqBody:
      title: Register
      type: object
      properties:
        email:
         type: string
         example: example@gmail.com
        password:
          type: string
          example: password123
    createCategoriesReqBody:
      title: createCategoriesReqBody
      type: object
      properties:
        name:
          type: string
          example: "Frontend"
    createCategoriesResponse:
     title: createCategoriesResponse
     type: object
     properties:
       id:
         type: integer
         example: 1
       name:
        type: string
        example: "Frontend"
       
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
