// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  password  String?
  googleId String?
  profile Profile?
  otp Otp?
  verified Boolean @default(false)
  transaction Transaction[]
  enrollment Enrollment[]
  mentor Mentor[]
  rating Rating[]
  progress Progress[]
  notification Notification[]
}

model Course {
  id    Int     @id @default(autoincrement())
  code String @unique
  title String  
  price Decimal
  level  CourseLevel
  isPremium Boolean
  description String
  groupUrl String?
  thumbnailUrl String 
  courseCategory CourseCategory[]
  transaction Transaction[]
  enrollment Enrollment[]
  mentor Mentor[]
  rating Rating[]
  chapter Chapter[]
}

model Profile {
  id        Int     @id @default(autoincrement())
  name     String
  phoneNumber   String?
  profilePicture   String 
  role Role @default(USER)
  joinDate DateTime @default(now())
  city String?
  country String?
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int @unique
}

model Otp {
  id        Int     @id @default(autoincrement())
  otp     String
  expiration DateTime
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int @unique
}


model CourseCategory {
  id    Int     @id @default(autoincrement())
  course    Course?    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int?
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  Int
}


model Category {
  id    Int     @id @default(autoincrement())
  name String @unique
  courseCategory CourseCategory[]
}

model Chapter {
  id    Int     @id @default(autoincrement())
  title String
  number Int 
  isPremium Boolean
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int 
  video Video[]
}

 

model Video {
  id    Int     @id @default(autoincrement())
  title String
  description String
  duration Int 
  url String
  chapter    Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId  Int 
  progress Progress[]
}


model Transaction {
  id    Int     @id @default(autoincrement())
  date DateTime
  expirationDate DateTime
  payDone  Boolean @default(false)
  payDate DateTime?
  paymentMethod String?
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  course    Course?    @relation(fields: [courseId], references: [id], onDelete: SetNull)
  courseId  Int? 
}

model Enrollment {
  id    Int     @id @default(autoincrement())
  date DateTime @default(now())
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int 
}

model Mentor {
  id    Int     @id @default(autoincrement())
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int 
}

model Rating {
  id    Int     @id @default(autoincrement())
  rate Int
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int 
}

model Progress {
  id    Int     @id @default(autoincrement())
  completed Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  video    Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId  Int 
}

model Notification {
  id    Int     @id @default(autoincrement())
  type String
  message String
  details String?
  created_at DateTime
  is_read Boolean
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  
}


enum Role {
  USER
  ADMIN
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}



